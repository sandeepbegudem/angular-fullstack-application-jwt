//package com.sandeepbegudem.backend.application.utility;////import com.sandeepbegudem.backend.application.entity.*;//import com.sandeepbegudem.backend.application.repository.*;//import jakarta.persistence.EntityNotFoundException;//import org.springframework.transaction.annotation.Transactional;////import java.util.List;//import java.util.Optional;////public class OperationUtility {////    public static void usersOperations(UserRepository userRepository) {//       // createUsers(userRepository);//        //updateUsers(userRepository);////        deleteUser(userRepository);//        fetchUsers(userRepository);//    }////    @Transactional//    public static void rolesOperations(RoleRepository roleRepository) {//       // createRoles(roleRepository);//        //updateRole(roleRepository);//        //deleteRole(roleRepository);//        fetchRole(roleRepository);//    }////    @Transactional(readOnly = true)//    private static void fetchRole(RoleRepository roleRepository) {//        roleRepository.findAll()//                .forEach(System.out::println);//    }////    private static void deleteRole(RoleRepository roleRepository) {//        Role role = roleRepository.findById(2L).orElseThrow(//                () -> new EntityNotFoundException("Role Not Found"));//        roleRepository.delete(role);//    }////    private static void updateRole(RoleRepository roleRepository) {//        Role role = roleRepository.findById(1L)//                .orElseThrow(//                        () -> new EntityNotFoundException("Role Not Found"));//        role.setName("NewAdmin");//        roleRepository.save(role);//    }////    private static void createRoles(RoleRepository roleRepository) {//        Role role1 = new Role("Admin" );//        roleRepository.save(role1);////        Role role2 = new Role("Instructor" );//        roleRepository.save(role2);////        Role role3 = new Role("Student");//        roleRepository.save(role3);//    }////    private static void fetchUsers(UserRepository userRepository) {//        userRepository.findAll().forEach(System.out::println);//    }////    private static void createUsers(UserRepository userRepository) {//        User user1 = new User("user1@gmail.com", "pass1");//        User user2 = new User("user2@gmail.com", "pass2");//        User user3 = new User("user3@gmail.com", "pass3");//        User user4 = new User("user4@gmail.com", "pass4");////        userRepository.save(user1);//        userRepository.save(user2);//        userRepository.save(user3);//        userRepository.save(user4);//    }////    private static void updateUsers(UserRepository userRepository) {//        User user = userRepository.findById(2L).orElseThrow(() -> new EntityNotFoundException("User Not Found"));//        user.setEmail("newemail@gmail.com");//        userRepository.save(user);//    }////    private static void deleteUser(UserRepository userRepository) {//        User user = userRepository.findById(3L).orElseThrow(() -> new EntityNotFoundException("User Not Found"));//        userRepository.delete(user);//        userRepository.deleteById(3L);//    }////    public static void assignRolesToUsers(UserRepository userRepository, RoleRepository roleRepository) {//        Role role = roleRepository.findByName("Admin");//        if (role == null) throw new EntityNotFoundException("Role Not Found");//        List<User> users = userRepository.findAll();//        users.forEach(user -> {//            user.assignRoleToUser(role);//            userRepository.save(user);//        });//    }////    public static void instructorOperations(InstructorRepository instructorRepository, UserRepository userRepository, RoleRepository roleRepository) {//        createInstructors(instructorRepository, userRepository, roleRepository);//        updateInstructor(instructorRepository);//        removeInstructor(instructorRepository);//        fetchInstructors(instructorRepository);//    }////    private static void fetchInstructors(InstructorRepository instructorRepository) {//        instructorRepository.findAll().forEach(System.out::println);//    }////    private static void removeInstructor(InstructorRepository instructorRepository) {////        Instructor instructor = instructorRepository//                .findById(3L)//                .orElseThrow(() -> new EntityNotFoundException("Instructor Not Found"));//        instructorRepository.deleteById(3L);//    }////    private static void updateInstructor(InstructorRepository instructorRepository) {//        Instructor instructor = instructorRepository//                .findById(2L)//                .orElseThrow(() -> new EntityNotFoundException("Instructor Not Found"));//        instructor.setSummary("certified aws and highly skilled instructor");//        instructorRepository.save(instructor);//    }////    private static void createInstructors(InstructorRepository instructorRepository, UserRepository userRepository, RoleRepository roleRepository) {//         Role role = roleRepository.findByName("Instructor");//         if (role == null) throw new EntityNotFoundException("Role Not Found");////         User user1 = new User("instructor1@gmail.com", "pass1");//         userRepository.save(user1);//         user1.assignRoleToUser(role);//        Instructor instructor1 = new Instructor("john", "doe", "experienced instructor", user1);//        instructorRepository.save(instructor1);////        User user2 = new User("instructor2@gmail.com", "pass2");//        userRepository.save(user2);//        user2.assignRoleToUser(role);//        Instructor instructor2 = new Instructor("chris", "evans", "experienced instructor", user2);//        instructorRepository.save(instructor2);////        User user3 = new User("instructor3@gmail.com", "pass3");//        userRepository.save(user3);//        user3.assignRoleToUser(role);//        Instructor instructor3 = new Instructor("sandeep", "b", "experienced instructor", user3);//        instructorRepository.save(instructor3);//    }////    private static void studentOperations(UserRepository userRepository, StudentRepository studentRepository, RoleRepository roleRepository) {//        createStudent(userRepository, studentRepository, roleRepository);//        updateStudent(studentRepository);//        removeStudent(studentRepository);//        fetchStudents(studentRepository);//    }////    private static void fetchStudents(StudentRepository studentRepository) {//        studentRepository.findAll().forEach(System.out::println);//    }////    private static void removeStudent(StudentRepository studentRepository) {//        Student student = studentRepository.findById(3L).orElseThrow(() -> new EntityNotFoundException("Student ot Found"));//        studentRepository.deleteById(student.getStudentId());//    }////    private static void updateStudent(StudentRepository studentRepository) {//        Student student = studentRepository.findById(2L).orElseThrow(() -> new EntityNotFoundException("Student ot Found"));//        student.setLevel("Beginner");//        studentRepository.save(student);//    }////    private static void createStudent(UserRepository userRepository, StudentRepository studentRepository, RoleRepository roleRepository) {//        Role role = roleRepository.findByName("student");//        if (role == null) throw new EntityNotFoundException("Role Not Found");////        User user1 = new User("rohit.s@gmail.com", "rohit123");//        userRepository.save(user1);//        user1.assignRoleToUser(role);//        Student student1 = new Student("rohit", "sharma", "master", user1);//        studentRepository.save(student1);////        User user2 = new User("yashasvi.j@gmail.com", "yash123");//        userRepository.save(user2);//        user1.assignRoleToUser(role);//        Student student2 = new Student("yashasvi", "j", "phd", user2);//        studentRepository.save(student2);////        User user3 = new User("rahul.kl.s@gmail.com", "rahul123");//        userRepository.save(user3);//        user3.assignRoleToUser(role);//        Student student3 = new Student("rahul", "kl", "bachelors", user3);//        studentRepository.save(student3);//    }////    public static void courseOperations(CourseRepository courseRepository, InstructorRepository instructorRepository, StudentRepository studentRepository) {//        createCourses(courseRepository, instructorRepository);//        updateCourse(courseRepository);//        deleteCourse(courseRepository);//        fetchCourses(courseRepository);//        assignStudentsToCourse(courseRepository, studentRepository);//        fetchCoursesForStudent(courseRepository);//    }////    private static void createCourses(CourseRepository courseRepository, InstructorRepository instructorRepository) {//        Instructor instructor = instructorRepository.findById(1L).orElseThrow(() -> new EntityNotFoundException("Instructor Not Found"));////        Course course1 = new Course("Hibernate", "5 hours", "Introduction to Hibernate", instructor);//        courseRepository.save(course1);////        Course course2 = new Course("Spring Boot", "10 hours", "Master Spring Data Jpa", instructor);//        courseRepository.save(course2);////        Course course3 = new Course("Kubernetes", "5 hours", "Master Kubernetes", instructor);//        courseRepository.save(course3);//    }//    private static void updateCourse(CourseRepository courseRepository) {//        Course course = courseRepository.findById(1L).orElseThrow(() -> new EntityNotFoundException("Course Not Found"));//        course.setCourseDescription("Master Hibernate");//        course.setCourseDuration("10 hours");//        courseRepository.save(course);//    }////    private static void fetchCourses(CourseRepository courseRepository) {//        courseRepository.findAll().forEach(System.out::println);//    }////    private static void deleteCourse(CourseRepository courseRepository) {//        courseRepository.deleteById(3L);//    }//    private static void assignStudentsToCourse(CourseRepository courseRepository, StudentRepository studentRepository) {//        Optional<Student> student1 = studentRepository.findById(1L);//        Optional<Student> student2 = studentRepository.findById(2L);//        Course course = courseRepository.findById(1L).orElseThrow(() -> new EntityNotFoundException("Course Not Found"));////        student1.ifPresent(course::assignStudentToCourse);//        student2.ifPresent(course::assignStudentToCourse);////    }////    private static void fetchCoursesForStudent(CourseRepository courseRepository) {//        courseRepository.getCoursesByStudentId(1L).forEach(System.out::println);//    }////}