package com.sandeepbegudem.backend.application.config;import com.sandeepbegudem.backend.application.filter.JWTAuthenticationFilter;import com.sandeepbegudem.backend.application.filter.JWTAuthorizationFilter;import com.sandeepbegudem.backend.application.helper.JWTHelper;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.NoOpPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configuration@EnableWebSecuritypublic class SecurityConfiguration {    private static final String[] AUTH_WHITE_LIST = {            "/login",            "/v3/api-docs/**",            "/swagger-ui/**",            "/v2/api-docs/**",            "/swagger-resources/**",            "/error"    };    private final JWTHelper jwtHelper;    public SecurityConfiguration(JWTHelper jwtHelper) {        this.jwtHelper = jwtHelper;    }    @SuppressWarnings("deprecation")    @Bean    public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {        httpSecurity.cors(AbstractHttpConfigurer::disable)                .csrf(AbstractHttpConfigurer::disable)                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));        httpSecurity.authorizeRequests().requestMatchers(AUTH_WHITE_LIST).permitAll();        httpSecurity.authorizeRequests().requestMatchers("/api/v1/courses/**","/api/v1/students/**", "/api/v1/instructors/**").authenticated();        //httpSecurity.authorizeRequests().anyRequest().authenticated();        httpSecurity.addFilter(new JWTAuthenticationFilter(authenticationManager(httpSecurity.getSharedObject(AuthenticationConfiguration.class)), jwtHelper));        httpSecurity.addFilterBefore(new JWTAuthorizationFilter(jwtHelper), UsernamePasswordAuthenticationFilter.class);        return httpSecurity.build();    }    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {        return authConfig.getAuthenticationManager();    }    @Bean    public PasswordEncoder passwordEncoder() {       // return NoOpPasswordEncoder.getInstance();        return new BCryptPasswordEncoder();    }}