package com.sandeepbegudem.backend.application.service.impl;import com.sandeepbegudem.backend.application.dto.StudentDTO;import com.sandeepbegudem.backend.application.entity.Course;import com.sandeepbegudem.backend.application.entity.Student;import com.sandeepbegudem.backend.application.entity.User;import com.sandeepbegudem.backend.application.mapper.StudentMapper;import com.sandeepbegudem.backend.application.repository.StudentRepository;import com.sandeepbegudem.backend.application.service.StudentService;import com.sandeepbegudem.backend.application.service.UserService;import jakarta.persistence.EntityNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.PageRequest;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Iterator;import java.util.stream.Collectors;@Service@Transactionalpublic class StudentServiceImpl implements StudentService {   @Autowired   private StudentRepository studentRepository;   @Autowired   private StudentMapper studentMapper;   @Autowired   private UserService userService;    public StudentServiceImpl(StudentRepository studentRepository, StudentMapper studentMapper, UserService userService) {        this.studentRepository = studentRepository;        this.studentMapper = studentMapper;        this.userService = userService;    }    @Override    public Student loadStudentById(Long studentId) {        return studentRepository.findById(studentId)                .orElseThrow(() -> new EntityNotFoundException("Student with ID " + studentId + " Not Found"));    }    @Override    public Page<StudentDTO> fetchStudentByName(String name, int page, int size) {        PageRequest pageRequest = PageRequest.of(page, size);        Page<Student> studentPage = studentRepository.findStudentByName(name, pageRequest);        return new PageImpl<>(studentPage.getContent()                .stream()                .map(studentMapper::fromStudent)                .collect(Collectors.toList()), pageRequest,studentPage.getTotalElements());    }    @Override    public StudentDTO fetchStudentByEmail(String email) {        return studentMapper.fromStudent(studentRepository.findStudentByEmail(email));    }    @Override    public StudentDTO createStudent(StudentDTO studentDTO) {        User user = userService.createUser(studentDTO.getUserDTO().getEmail(), studentDTO.getUserDTO().getPassword());        userService.assignRoleToUser(user.getEmail(), "Student");        Student student = studentMapper.fromStudentDTO(studentDTO);        student.setUser(user);        return studentMapper.fromStudent(studentRepository.save(student));    }    @Override    public StudentDTO updateStudent(StudentDTO studentDTO) {        Student loadedStudent = loadStudentById(studentDTO.getStudentId());        Student student = studentMapper.fromStudentDTO(studentDTO);        student.setUser(loadedStudent.getUser());        student.setCourses(loadedStudent.getCourses());        return  studentMapper.fromStudent(studentRepository.save(student));    }    @Override    public void removeStudent(Long studentId) {        Student student = loadStudentById(studentId);        Iterator<Course> courseIterator = student.getCourses().iterator();        if(courseIterator.hasNext()) {            Course course = courseIterator.next();            course.removeStudentFromCourse(student);        }        studentRepository.deleteById(studentId);    }}