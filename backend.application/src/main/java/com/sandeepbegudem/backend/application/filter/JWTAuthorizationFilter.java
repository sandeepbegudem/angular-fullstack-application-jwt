package com.sandeepbegudem.backend.application.filter;import com.auth0.jwt.JWT;import com.auth0.jwt.JWTVerifier;import com.auth0.jwt.algorithms.Algorithm;import com.auth0.jwt.interfaces.DecodedJWT;import com.sandeepbegudem.backend.application.helper.JWTHelper;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.web.filter.OncePerRequestFilter;import java.io.IOException;import java.util.ArrayList;import java.util.Collection;import static com.sandeepbegudem.backend.application.constants.JWTUtil.AUTH_HEADER;import static com.sandeepbegudem.backend.application.constants.JWTUtil.SECRET;public class JWTAuthorizationFilter extends OncePerRequestFilter {    private final JWTHelper jwtHelper;    public JWTAuthorizationFilter(JWTHelper jwtHelper) {        this.jwtHelper = jwtHelper;    }    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {        String accessToken = jwtHelper.extractTokenFromHeaderIfExists(request.getHeader(AUTH_HEADER));        if(accessToken !=null) {            Algorithm algorithm = Algorithm.HMAC256(SECRET);            JWTVerifier jwtVerifier = JWT.require(algorithm).build(); // checks the validity of the token            DecodedJWT decodedJWT = jwtVerifier.verify(accessToken); // decodes and verifies the jwt token            String email = decodedJWT.getSubject();            String [] roles = decodedJWT.getClaim("roles").asArray(String.class);            Collection<GrantedAuthority> authorities = new ArrayList<>();            for (String role : roles) {                authorities.add(new SimpleGrantedAuthority(role));            }            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(email, null, authorities);            authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));            SecurityContextHolder.getContext().setAuthentication(authenticationToken);            filterChain.doFilter(request, response);        }        else {            filterChain.doFilter(request, response);        }    }}