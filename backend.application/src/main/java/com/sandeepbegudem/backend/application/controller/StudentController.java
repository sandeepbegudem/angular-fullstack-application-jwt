package com.sandeepbegudem.backend.application.controller;import com.sandeepbegudem.backend.application.dto.CourseDTO;import com.sandeepbegudem.backend.application.dto.StudentDTO;import com.sandeepbegudem.backend.application.entity.User;import com.sandeepbegudem.backend.application.service.CourseService;import com.sandeepbegudem.backend.application.service.StudentService;import com.sandeepbegudem.backend.application.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.web.bind.annotation.*;@RestController@CrossOrigin("*")@RequestMapping("/api/v1/students")public class StudentController {    @Autowired    private StudentService studentService;    @Autowired    private UserService userService;    @Autowired    private CourseService courseService;    public StudentController(StudentService studentService, UserService userService, CourseService courseService) {        this.studentService = studentService;        this.userService = userService;        this.courseService = courseService;    }    @GetMapping    public Page<StudentDTO> searchStudents(@RequestParam(name = "keyword", defaultValue = "") String keyword,                                           @RequestParam(name = "page", defaultValue = "0") int page,                                           @RequestParam(name = "size", defaultValue = "5") int size) {        return studentService.fetchStudentByName(keyword, page, size);    }    @DeleteMapping("/{studentId}")    public void deleteStudentById(@PathVariable Long studentId) {        studentService.removeStudent(studentId);    }    @PostMapping    public StudentDTO insertStudent(@RequestBody StudentDTO studentDTO) {       User user = userService.loadUserByEmail(studentDTO.getUserDTO().getEmail());        if(user != null) throw new RuntimeException("Email Already Exist");        return studentService.createStudent(studentDTO);    }    @PutMapping("/{studentId}")    public StudentDTO updateStudent(@PathVariable Long studentId, @RequestBody StudentDTO studentDTO) {        studentDTO.setStudentId(studentId);        return studentService.updateStudent(studentDTO);    }    @GetMapping("{studentId}/courses")    public Page<CourseDTO> coursesByStudentId(@PathVariable long studentId,                                              @RequestParam(name = "page", defaultValue = "0") int page,                                              @RequestParam(name = "size", defaultValue = "5") int size) {        return courseService.fetchCoursesForStudent(studentId, page, size);    }    @GetMapping("/{studentId}/other-courses")    public Page<CourseDTO> nonSubscribedCoursesByStudentId(@PathVariable long studentId,                                                           @RequestParam(name = "page", defaultValue = "0") int page,                                                           @RequestParam(name = "size", defaultValue = "5") int size) {        return courseService.fetchNonEnrolledInCoursesForStudent(studentId, page,size);    }    @GetMapping("/find")    public StudentDTO fetchStudentByEmail(@RequestParam(name = "email", defaultValue = "") String email) {        return studentService.fetchStudentByEmail(email);    }}