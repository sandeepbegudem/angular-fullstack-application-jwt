package com.sandeepbegudem.backend.application.service.impl;import com.sandeepbegudem.backend.application.dto.InstructorDTO;import com.sandeepbegudem.backend.application.entity.Course;import com.sandeepbegudem.backend.application.entity.Instructor;import com.sandeepbegudem.backend.application.entity.User;import com.sandeepbegudem.backend.application.mapper.InstructorMapper;import com.sandeepbegudem.backend.application.repository.InstructorRepository;import com.sandeepbegudem.backend.application.service.CourseService;import com.sandeepbegudem.backend.application.service.InstructorService;import com.sandeepbegudem.backend.application.service.UserService;import jakarta.persistence.EntityNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.PageRequest;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;import java.util.stream.Collectors;@Service@Transactionalpublic class InstructorServiceImpl implements InstructorService {    @Autowired    private InstructorRepository instructorRepository;    @Autowired    private InstructorMapper instructorMapper;    @Autowired    private UserService userService;    @Autowired    private CourseService courseService;    public InstructorServiceImpl(InstructorRepository instructorRepository, InstructorMapper instructorMapper, UserService userService, CourseService courseService) {        this.instructorRepository = instructorRepository;        this.instructorMapper = instructorMapper;        this.userService = userService;        this.courseService = courseService;    }    @Override    public Instructor loadInstructorById(Long instructorId) {        return instructorRepository.findById(instructorId).orElseThrow(() -> new EntityNotFoundException("Instructor with ID " + instructorId + " Not Found"));    }    @Override    public Page<InstructorDTO> findInstructorsByName(String name, int currentPage, int pageSize) {        PageRequest pageRequest = PageRequest.of(currentPage, pageSize);        Page<Instructor> instructorPage = instructorRepository.findInstructorsByName(name, pageRequest);        return new PageImpl<>(instructorPage.getContent().stream().map(instructor -> instructorMapper.fromInstructor(instructor)).collect(Collectors.toList()), pageRequest, instructorPage.getTotalElements());    }    @Override    public InstructorDTO loadInstructorByEmail(String email) {        Instructor instructor = instructorRepository.findInstructorByEmail(email);        return instructorMapper.fromInstructor(instructor);    }    @Override    public InstructorDTO createInstructor(InstructorDTO instructorDTO) {        User user = userService.createUser(instructorDTO.getUserDTO().getEmail(), instructorDTO.getUserDTO().getPassword());        userService.assignRoleToUser(user.getEmail(), "Instructor");        Instructor instructor = instructorMapper.fromInstructorDTO(instructorDTO);        instructor.setUser(user);        Instructor savedInstructor = instructorRepository.save(instructor);        return instructorMapper.fromInstructor(savedInstructor);    }    @Override    public InstructorDTO updateInstructor(InstructorDTO instructorDTO) {        Instructor loadedInstructor = loadInstructorById(instructorDTO.getInstructorId());        Instructor instructor = instructorMapper.fromInstructorDTO(instructorDTO);        instructor.setUser(loadedInstructor.getUser());        instructor.setCourses(loadedInstructor.getCourses());        Instructor updatedInstructor = instructorRepository.save(instructor);        return instructorMapper.fromInstructor(updatedInstructor);    }    @Override    public List<InstructorDTO> fetchInstructors() {       return instructorRepository.findAll().stream()                .map(instructorMapper::fromInstructor)                .collect(Collectors.toList());    }    @Override    public void removeInstructor(Long instructorId) {       Instructor instructor = loadInstructorById(instructorId);       for (Course course : instructor.getCourses()) {           courseService.removeCourse(course.getCourseId());       }        instructorRepository.deleteById(instructorId);    }}