package com.sandeepbegudem.backend.application.service.impl;import com.sandeepbegudem.backend.application.dto.CourseDTO;import com.sandeepbegudem.backend.application.entity.Course;import com.sandeepbegudem.backend.application.entity.Instructor;import com.sandeepbegudem.backend.application.entity.Student;import com.sandeepbegudem.backend.application.mapper.CourseMapper;import com.sandeepbegudem.backend.application.repository.CourseRepository;import com.sandeepbegudem.backend.application.repository.InstructorRepository;import com.sandeepbegudem.backend.application.repository.StudentRepository;import com.sandeepbegudem.backend.application.service.CourseService;import jakarta.persistence.EntityNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.PageRequest;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Optional;import java.util.stream.Collectors;@Service@Transactionalpublic class CourseServiceImpl implements CourseService {    @Autowired    private CourseRepository courseRepository;    @Autowired    private CourseMapper courseMapper;    @Autowired    private InstructorRepository instructorRepository;    @Autowired    private StudentRepository studentRepository;    public CourseServiceImpl(CourseRepository courseRepository, CourseMapper courseMapper, InstructorRepository instructorRepository, StudentRepository studentRepository) {        this.courseRepository = courseRepository;        this.courseMapper = courseMapper;        this.instructorRepository = instructorRepository;        this.studentRepository = studentRepository;    }    /**     * @param courseId     * @return     */    @Override    public Course fetchCourseById(Long courseId) {        return courseRepository.findById(courseId).orElseThrow(() -> new EntityNotFoundException("Course with ID " + courseId + " Not Found"));    }    /**     * @param courseDTO     * @return     */    @Override    public CourseDTO insertCourse(CourseDTO courseDTO) {       Course course = courseMapper.fromCourseDTO(courseDTO);        Instructor instructor = instructorRepository                .findById(courseDTO.getInstructorDTO().getInstructorId())                .orElseThrow(() -> new EntityNotFoundException("Instructor with ID " + courseDTO.getInstructorDTO().getInstructorId() + " Not Found"));        course.setInstructor(instructor);        Course savedCourse = courseRepository.save(course);        return courseMapper.fromCourse(savedCourse);    }    /**     * @param courseDTO     * @return     */    @Override    public CourseDTO updateCourse(CourseDTO courseDTO) {       Course course = courseRepository               .findById(courseDTO.getCourseId()).orElseThrow(                       () -> new EntityNotFoundException("Course ID " +                               courseDTO.getCourseId() + " Not Found"));       Instructor instructor = instructorRepository.findById(courseDTO.getInstructorDTO()                .getInstructorId()).orElseThrow(                        () -> new EntityNotFoundException("Instructor ID " +                                courseDTO.getInstructorDTO().getInstructorId() + " Not Found"));       course.setInstructor(instructor);       course.setCourseId(courseDTO.getCourseId());       course.setCourseName(courseDTO.getCourseName());       course.setCourseDuration(courseDTO.getCourseDuration());       course.setCourseDescription(courseDTO.getCourseDescription());       Course updatedCourse = courseRepository.save(course);       return courseMapper.fromCourse(updatedCourse);    }    /**     * @param keyword     * @param page     * @param size     * @return     */    @Override    public Page<CourseDTO> findCourseByCourseName(String keyword, int page, int size) {        PageRequest pageRequest = PageRequest.of(page, size);        Page<Course> coursesPage = courseRepository.findCoursesByCourseNameContains(keyword, pageRequest);        return new PageImpl<>(coursesPage.getContent()                .stream()                .map(course -> courseMapper.fromCourse(course))                .collect(Collectors.toList()), pageRequest, coursesPage.getTotalElements());    }    /**     * @param courseId     * @param studentId     */    @Override    public void assignStudentToCourse(Long courseId, Long studentId) {        Student student = studentRepository.findById(studentId).orElseThrow(() -> new EntityNotFoundException("Student ID " + studentId + " Not Found"));        Course course = fetchCourseById(courseId);        course.assignStudentToCourse(student);    }    /**     * @param studentId     * @param page     * @param size     * @return     */    @Override    public Page<CourseDTO> fetchCoursesForStudent(Long studentId, int page, int size) {       PageRequest pageRequest = PageRequest.of(page, size);       Page<Course> studentCourses = courseRepository.getCoursesByStudentId(studentId, pageRequest);       return new PageImpl<>(studentCourses.getContent().stream().map(c -> courseMapper.fromCourse(c)).collect(Collectors.toList()),               pageRequest, studentCourses.getTotalElements());    }    /**     * @param studentId     * @param page     * @param size     * @return     */    @Override    public Page<CourseDTO> fetchNonEnrolledInCoursesForStudent(Long studentId, int page, int size) {        PageRequest pageRequest = PageRequest.of(page, size);        Page<Course> nonEnrolledInCourses = courseRepository                .getNonEnrolledInCoursesByStudentId(studentId, pageRequest);        return new PageImpl<>(nonEnrolledInCourses.getContent().stream().map(c -> courseMapper.fromCourse(c)).collect(Collectors.toList()),                pageRequest, nonEnrolledInCourses.getTotalElements());    }    /**     * @param courseId     */    @Override    public void removeCourse(Long courseId) {        Course course = courseRepository.findById(courseId).orElseThrow(() -> new EntityNotFoundException("Course ID " + courseId +" Not Found"));        courseRepository.deleteById(course.getCourseId());    }    /**     * @param instructorId     * @param page     * @param size     * @return     */    @Override    public Page<CourseDTO> fetchCoursesForInstructor(Long instructorId, int page, int size) {        PageRequest pageRequest = PageRequest.of(page, size);        Page<Course> instructorCourses = courseRepository.getCoursesByInstructorId(instructorId, pageRequest);        return new PageImpl<>(instructorCourses.getContent()                .stream()                .map(c -> courseMapper.fromCourse(c))                .collect(Collectors.toList()),                pageRequest, instructorCourses.getTotalElements());    }}